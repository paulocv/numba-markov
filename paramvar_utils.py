"""
Common utilities for defining a paramvar script for numba-markov model.
"""

from argparse import ArgumentParser
from collections import OrderedDict

from .model_base import ModelBase

# -------------------------------------------
# ARGUMENT (ARGV) PARSING PROTOCOL
argv_parser = ArgumentParser()

# ------ Mandatories
# Argv [1]: input file
argv_parser.add_argument("input_file",
                         help="Path for the multi input file, which defines the parameters of the simulations, "
                              "as well as those that will be varied. Must be interpretable by 'read_config_file' "
                              "function from 'file_tools.py' module.")
# Argv [2]: output folder
argv_parser.add_argument("output_folder",
                         help="Path for the output folder, the directory that will store the simulation outputs (both"
                              " the summary file and the individual simulation files). If the path does not exist, it "
                              "is recursively created.")

# ------ Optionals
# Number of processes
argv_parser.add_argument("-p", "--processes", type=int, default=None, metavar="N",
                         help="Number of parallel processes to be used if pathos multiprocessing is on. If not "
                              "informed, allows pathos to determine it by the number of available CPU threads.")

# Summary file overwrite prompt
argv_parser.add_argument("--prompt-overwrite", action="store_true",
                         help="When specified, prompts the user if to overwrite a summary file if the given one "
                              "already exists. Default behavior is to overwrite without prompt.")


# --------------------------------------------
# METRICS HANDLING via static classes

# -------------------
# GUIDE - How to include a new metrics
# - Implement the required functions in a derived of MetricBase class.
# - Update the metric_flag_to_class dictionary, at the end of this section


class MetricBase:
    """
    Base class for a metric static class.
    A child class will implement the methods and attributes that are required for the metrics to be processed and
    exported in output files.
    """
    @staticmethod
    def get_output_topics(model_class):
        """
        Returns the names of the output topics generated by this metric.

        Parameters
        ----------
        model_class : ModelBase

        Returns
        -------
        output_topics : list
        """
        raise NotImplementedError


class MetricStateDensities(MetricBase):

    @staticmethod
    def get_output_topics(model_class):
        return ["rho_" + name for name in model_class.state_names]


class MetricPrevDensities(MetricBase):

    @staticmethod
    def get_output_topics(model_class):
        # Concatenates rho_ with the name of each prevalence registered on the model.
        return ["rho_" + prev_tuple[0] for prev_tuple in model_class.prevalences]


class MetricNumSteps(MetricBase):

    @staticmethod
    def get_output_topics(model_class):
        return ["num_steps", ]


# Dictionary that stores the metric flags and their respective processor classes.
# The dict is ordered, so outputs can have a consistent order among implementations.
metric_flag_to_class = OrderedDict(
    calc_state_densities=MetricStateDensities,
    calc_prevalence_densities=MetricPrevDensities,
    calc_num_steps=MetricNumSteps,
)


